# Generated by Django 4.1.2 on 2022-11-20 19:54

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ClusterNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(unique=True)),
                ('hostname', models.TextField()),
                ('status', models.CharField(choices=[('DOWN', 'Down'), ('READY', 'Ready')], max_length=50)),
                ('agent_status', models.CharField(choices=[('NOT_RUNNING', 'Not running'), ('RUNNING', 'Running')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='DockerContainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(unique=True)),
                ('name', models.TextField()),
                ('status', models.CharField(choices=[('NEW', 'New'), ('PENDING', 'Pending'), ('ASSIGNED', 'Assigned'), ('ACCEPTED', 'Accepted'), ('PREPARING', 'Preparing'), ('STARTING', 'Starting'), ('RUNNING', 'Running'), ('COMPLETE', 'Complete'), ('FAILED', 'Failed'), ('SHUTDOWN', 'Shutdown'), ('REJECTED', 'Rejected'), ('OPRHANED', 'Orphaned'), ('REMOVE', 'Remove')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='DockerService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(unique=True)),
                ('name', models.TextField()),
                ('backup_status', models.CharField(choices=[('DISABLED', 'Disabled'), ('PENDING', 'Pending'), ('ACTIVE', 'Active'), ('FAILING', 'Failing')], default='DISABLED', max_length=50)),
            ],
        ),
        migrations.AddConstraint(
            model_name='dockerservice',
            constraint=models.CheckConstraint(check=models.Q(('identifier', ''), _negated=True), name='dockerservice_non_empty_identifier'),
        ),
        migrations.AddConstraint(
            model_name='dockerservice',
            constraint=models.CheckConstraint(check=models.Q(('name', ''), _negated=True), name='dockerservice_non_empty_name'),
        ),
        migrations.AddField(
            model_name='dockercontainer',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cluster.clusternode'),
        ),
        migrations.AddField(
            model_name='dockercontainer',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cluster.dockerservice'),
        ),
        migrations.AddConstraint(
            model_name='clusternode',
            constraint=models.CheckConstraint(check=models.Q(('identifier', ''), _negated=True), name='clusternode_non_empty_identifier'),
        ),
        migrations.AddConstraint(
            model_name='clusternode',
            constraint=models.CheckConstraint(check=models.Q(('hostname', ''), _negated=True), name='clusternode_non_empty_hostname'),
        ),
        migrations.AddConstraint(
            model_name='clusternode',
            constraint=models.CheckConstraint(check=models.Q(('status', ''), _negated=True), name='clusternode_non_empty_status'),
        ),
        migrations.AddConstraint(
            model_name='clusternode',
            constraint=models.CheckConstraint(check=models.Q(('agent_status', ''), _negated=True), name='clusternode_non_empty_agent_status'),
        ),
        migrations.AddConstraint(
            model_name='dockercontainer',
            constraint=models.CheckConstraint(check=models.Q(('identifier', ''), _negated=True), name='dockercontainer_non_empty_identifier'),
        ),
        migrations.AddConstraint(
            model_name='dockercontainer',
            constraint=models.CheckConstraint(check=models.Q(('name', ''), _negated=True), name='dockercontainer_non_empty_name'),
        ),
        migrations.AddConstraint(
            model_name='dockercontainer',
            constraint=models.CheckConstraint(check=models.Q(('status', ''), _negated=True), name='dockercontainer_non_empty_status'),
        ),
    ]
